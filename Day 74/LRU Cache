class LRUCache {
     Node head=new Node(0,0);
     Node tail=new Node(0,0);
     int capacity;
     HashMap<Integer,Node> map=new HashMap<>();
    LRUCache(int cap) {
        // code 
        this.capacity=cap;
        head.next=tail;
        tail.prev=head;
        
    }

    public int get(int key) {
if(map.containsKey(key)){
    Node node=map.get(key);
    remove(node);
    insert(node);
   return node.value;
}else{
    return -1;
}
        
        //  code here
    }

        
    public void put(int key, int value) {
        //  code here
        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(map.size()==capacity){
            remove(tail.prev);
        }
        insert(new Node (key,value));
    }
    
    
    private void remove(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
        
    }
    
    private void insert(Node node){
    map.put(node.key,node);
    node.prev=head;
    node.next=head.next;
    head.next.prev=node;
    head.next=node;
}

class Node {
    Node prev,next;
    int key,value;
    Node(int _key,int _value){
        key=_key;
        value=_value;
    }
}
}

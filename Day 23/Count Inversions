class Solution {
    static int inversionCount(int arr[]) {
        // Code Here
        return mergesortandcount(arr,0,arr.length-1);
    }
    
    public static int mergesortandcount(int arr[],int left,int right){
        
        int count=0;
        if(left<right){
        int mid=(left+right)/2;
        
        count+=mergesortandcount(arr,left,mid);
        count+=mergesortandcount(arr,mid+1,right);
        count+=mergesort(arr,left,mid,right);
        }
        return count;
    }
    
    
    public static int mergesort(int arr[],int left,int mid,int right){
        ArrayList<Integer> temp=new ArrayList<>();
        int i=left;
        int j=mid+1;
        
        int count=0;
        while(i<=mid && j<=right){
            if(arr[i]<=arr[j]){
                temp.add(arr[i]);
                i++;
            }else{
                temp.add(arr[j]);
                count+=(mid-i+1);
                j++;
            }
        }
        
        
        while(i<=mid){
            temp.add(arr[i]);
            i++;
        }
        
        while(j<=right){
            temp.add(arr[j]);
            j++;
        }
        
        for(int k=left;k<=right;k++){
          arr[k]=temp.get(k-left);
        }
        
        
        return count;
    }
}

/*
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}
*/

class Solution {
    static Node reverse(Node head){
        Node curr=head;
        Node prev=null;
        Node next=null;
        // int count=0;
        while(curr!=null ){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            // count++;
            // Node front=temp.next;
            // temp.next=prev;
            // prev=temp;
            // temp=front;
        }
    //   if(head!=null) head.next=curr;
        return prev;
    }
    
    static Node Kthnode(Node temp,int k){
        // int count=0;
        // k-=1;
        while(temp!=null && k>1){
            temp=temp.next;
            k--;
        }
        return temp;
    }
    
    public Node reverseKGroup(Node head, int k) {
        // code here
        Node temp=head;
        Node prevlast=null;
        while(temp!=null){
            Node kthNode=Kthnode(temp,k);
            if(kthNode==null){
                Node newhead=reverse(temp);
                if(prevlast!=null){
                    prevlast.next=newhead;
                    return head;
                }
                    return newhead;
                }
                Node nextnode=kthNode.next;
                kthNode.next=null;
                Node newhead=reverse(temp);
                if(prevlast==null){
                    head=newhead;
                }else{
                    prevlast.next=newhead;
                }
                prevlast=temp;
                // prevlast.next=nextnode;
                temp=nextnode;
                
            
        }
        return head;
    }
}
